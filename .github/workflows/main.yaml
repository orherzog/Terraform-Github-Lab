name: On Push

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-2

# Permissions can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write
  pull-requests: write
  actions: write

jobs:
  AssumeRoleAndCallIdentity:
    runs-on: ubuntu-latest
    outputs:
      AWS_ACCESS_KEY_ID: ${{ steps.assume-role.outputs.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.assume-role.outputs.aws_secret_access_key }}
      AWS_SESSION_TOKEN: ${{ steps.assume-role.outputs.aws_session_token }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: assume-role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_GITHUB_ACTION }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
          
      - name: STS GetCallerIdentity
        run: |
          aws sts get-caller-identity
        id: sts

      - name: Set outputs for next job
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ needs.AssumeRoleAndCallIdentity.outputs.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ needs.AssumeRoleAndCallIdentity.outputs.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=${{ needs.AssumeRoleAndCallIdentity.outputs.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV

  TerraformBuild:
    needs: AssumeRoleAndCallIdentity
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.assume-role.outputs.AWS_REGION }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ needs.AssumeRoleAndCallIdentity.outputs.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ needs.AssumeRoleAndCallIdentity.outputs.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=${{ needs.AssumeRoleAndCallIdentity.outputs.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform Apply
        id: apply
        run: terraform apply --auto-approve
